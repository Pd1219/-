## js调试
1. 打印调试：

console.log()  // 后台显示
   alert()   //弹窗


## 语法规则
1. `<script>`在html文件中添加javascript代码
2. `<script>` 可以有多个，可以放在HTML中的任意位置，但是建议放在`<body>`结束标签之前
3. `<script>`引入外部 js文件使用 **src** 属性
4. 文档就绪函数：一个页面中有且只能有一个

window.onload = function(){
    console.log('这是第二个文档就绪函数')
}


### 标识符、关键字
1. **标识符** 编程时所要用来的名称：
2. **关键字** 有特殊含意的标识符:var function let const new ...
3. **保留字** 并没有特殊含意，但用户不能使用的标识符字

### 标识符、关键字
1. **标识符** 编程时所要用来的名称：
2. **关键字** 有特殊含意的标识符:var function let const new ...
3. **保留字** 并没有特殊含意，但用户不能使用的标识符字

### 命名规范
1. 见名知意:驼峰规则
   约定俗成：
* <变量名>：  首单词首字母小写后面单词首字母大写 yellowDog
* <常量名>：  单词所有字母大写 YELLOWDOG
* <类名>:    所有单词首字母大写 YellowDog
* <函数名>： 首单词首字母小写后面单词首字母大写 yellowDog()
* 名称严格区分大小写
> 可以使用的特殊字符 $ _ 名称的开头，不允许使用中文数字以及其它的特殊字符。
起名称的时候一定要避开与关键相似的名称 


##  console.time('1')  console.timeEnd('1') 用户计算两个语句间代码执行的时间。


## 数据类型
1. Number 不区分整数和浮点数，统一用Number表示。

  1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5
  NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
  Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity

2.  字符串
字符串是以单引号'或双引号" `` 反引号括起来的任意文本。
> + 在字符串运算中作为字符串连接符使用。
 `` 双反号 是模板字符串
* 模板字符串内部可以使用变量语法`${valueName}`
* 模板字符串可以换行。普通字符串不可以换行。
* 模板字符串将字符串在编辑器中输入的字符原意输出。
* 模板字符串效率高于普通字符串。

           吐 (真)    （假)fo s
3. 布尔值 **true** **false**
* 与运算：有0出0,全1出1 
* 或运算：有1出1  (只要有1就全为真)
* 非：取反

4. Null Undefined
* Undefined 这个值表示变量不含有值。
* 可以通过将变量的值设置为 null 来清空变量。

5. **typeof**用来判断变量的类型  
  *"undefined"  未定义
  *  boolean    布尔值
  *  string    字符串
  *  number    数字
  *  object     对象或null
  * function    函数


### 类型转换
1. 手动转换

Number()  数字
Boolean()  布尔值
String()   字符串

### 字符串转数字方法 parseInt()   parseFloat()。  转字符串方法  .toString()
 * parseInt()   建议明确指定解析进制   
   var num1 = parseInt("10", 2)  // 2  (以二进制解析)
   var num1 = parseInt("10", 8)  // 8  (以八进制解析)

 *parseFloat()  第 2 个小数点无效
    var num1 = parseFloat("123blue") //123
    var num1 = parseFloat("22.34.5") //22.34

 *.tostring()   也可以指定进制解析   默认以10进制解析
    var age = 11
    var min = age.tostring(); // `11`
    var num = 10
     alert(num.tostring(8));   //`12` 以八进制解析

2. 自动转换
    5-'1'    / 4
   5 +'1'    /51   + 在遇到字符串就成 字符串连接符 


## 运算符
1. 算术运算符 `+ - * / % ++ --`
   赋值运算符 `= += -= *= /= %=`(二元运算符)
   % (取余，取模)

* i++ 先使用再加一（递增）
* ++i  先加一（递增）再使用
> 只有当在一个表达中才考虑 先加和后加的问题。


2. 逻辑运算符 `&& || ! `
  &&  与    先看第一个表达式转换成布尔值的结果，如果为真。那么会看到第二表达式转换为结果。如果第一个表达式为假就直接转换为结果。（遇假就停）
  ||  或     先看第一个表达式转换成布尔值的结果，如果为真。那么就会直接转换为结果。如果第一个表达式为假就会看第二个直接转换为结果。（遇真就停）
   ！ 非   自身取反＝

5. 比较运算符：`== === != !== > < >= <=` 
== != ： 只关心数值，不关心数据类型
=== !== ：全等。 不但比较数据类型，而且数据也会比较
> 在写比较运算表达式时尽量让两边的操作数类型相同 否则在运算时自动类型转换时会造成不必要的逻辑错误


6. 运算符优先级

算术 》 比较 》 逻辑
.
() 括号优先级非常高，在不清楚优先级的情况下，将表达式用括号括起来。